<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation
		="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />
	<context:component-scan base-package="com.lec.aop" />
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	
	<!-- JDK 동적 프록시 방식 : 인터페이스를 구현한 AOPServiceIMPL 클래스에만 AOP가 적용 -->
	<aop:aspectj-autoproxy/>
	
	<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<value>
				/xml_aop/ctlDelete=ID_ctl
			</value>
		</property>	
	</bean>
	
	
	<bean id="ID_ctl" class = "com.lec.aop.xml.AOPController">
		<property name="aOPService" ref="ID_impl"/>
	</bean>	
	<bean id="ID_impl" class="com.lec.aop.xml.AOPServiceImpl">
		<constructor-arg>
			<ref bean="ID_dao"/>
		</constructor-arg>
	</bean>
	<bean id="ID_dao" class="com.lec.aop.xml.AOPDao"/>
	<bean id="ID_common_aspect" class="com.lec.aop.xml.CommonAspectXML"/>
	
	<!-- 
				<aop:before method="beforeAdvice" pointcut-ref="ID_cut"/>
				<aop:after method="afterAdvice" pointcut-ref="ID_cut"/>
				<aop:after-throwing method="afterThrowingAdvice" pointcut-ref="ID_cut" throwing="ex"/>
				<aop:after-returning method="afterReturningAdvice" pointcut-ref="ID_cut"/>
				<aop:around method="aroundAdvice" pointcut-ref="ID_cut"/>
	
	 -->

	<aop:config>
		<aop:pointcut id="ID_cut" expression="execution(public void com.lec.aop.xml.AOPServiceImpl.svcDelete())" />
		<aop:aspect id="ID_aspect" ref="ID_common_aspect">
			<aop:around method="aroundAdvice" pointcut-ref="ID_cut"/>
		</aop:aspect>
	</aop:config>
	
	<!-- CGLIB프록시 방식 : 인터페이스를 구현하지 않은 클래스에도 AOP 적용 별도lib 추가 설치 : cglib.jar
	<aop:aspectj-autoproxy proxy-target-class="true"/>-->
	
	<!-- ↑이걸 제외한 모든 파일은 컨테이너에서 처리 -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	
	<!--  <bean class = "org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name = "mappings">
			<value>
				/kosta/user/xmlFunc=xmlController
				/kosta/user/xmlFunc2=xmlController
			</value>
		</property>	
	</bean>
	-->
	
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/" />
		<!-- <beans:property name="prefix" value="/WEB-INF/views/" /> -->
		<property name="suffix" value=".jsp" />
	</bean>
	
</beans>
